{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs28 \cf0 Project template\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#poc_clicker_template.py"}}{\fldrslt http://www.codeskulptor.org/#poc_ttt_template.py}}\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#poc_ttt_template.py"}}{\fldrslt http://www.codeskulptor.org/#poc_ttt_template.py}}\
\
1.implementation of the mc_trial() function\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_1.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_1.py}}\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_2.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_2.py}}\
more or less implemented\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_3.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_3.py}}\
some error correction\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_4.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_4.py}}\
\
2. implementation of the mc_update_scores() function\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_6.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_6.py}}\
defined the variables - winner, winner_score, loser_score\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_7.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_7.py}}\
considered the draw case and updated winner_score and loser_score to be 0 in that\
case\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_8.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_8.py}}\
dimension is a scalar. Not a tuple or a list\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_9.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_9.py}}\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_10.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_10.py}}\
error correction\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_15.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_15.py}}\
error correction in updating the scores list of lists\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_16.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_16.py}}\
error correction in assigning values to player_score and other_player_score for the draw case\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_17.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_17.py}}\
\
3. implementation of the get_best_move() function\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_18.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_18.py}}\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_20.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_20.py}}\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_21.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_21.py}}\
some major structural changes in the function\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_22.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_22.py}}\
working function!\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_23.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_23.py}}\
\
4, implementation of mc_move(function)\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_24.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_24.py}}\
mostly working function\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_27.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_27.py}}\
increased the value of NTRIALS in line 13\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_29.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_29.py}}\
moved the \'93board_copy = board.clone()\'94 inside the loop\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_30.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_30.py}}\
increased NTRIALS to 32 i.e., NTRIALS = 32\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_31.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_31.py}}\
increased NTRIALS to 75\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_31.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_32.py}}\
increased NTRIALS to 400\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_41.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_41.py}}\
reverted NTRIALS to 1\
ERROR CORRECTION: replaced \'93provided.switch_player(player)\'94 on line 32 of the\
mc_trial() function with \'93player = provided.switch_player(player)\'94\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_50.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_50.py}}\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_51.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_51.py}}\
\
Final working version!\
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user35_0xDyGdWGyq_52.py"}}{\fldrslt http://www.codeskulptor.org/#user35_0xDyGdWGyq_52.py}}\
\
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\
The actual code:\
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\
"""\
Monte Carlo Tic-Tac-Toe Player\
"""\
\
import random\
import poc_ttt_gui\
import poc_ttt_provided as provided\
\
# Constants for Monte Carlo simulator\
# Change as desired\
#NTRIALS = 1    # Number of trials to run\
#increase NTRIALS to improve accuracy in choosing good moves\
NTRIALS = 5    # Number of trials to run\
MCMATCH = 1.0  # Score for squares played by the machine player\
MCOTHER = 1.0  # Score for squares played by the other player\
    \
# Add your functions here.\
def mc_trial(board, player):\
    """\
    This function takes a current board and the next player to\
    move. The function should play a game starting with the\
    given player by making random moves, alternating between\
    players. The function should return when the game is over.\
    The modified board will contain the state of the game, so\
    the function does not return anything. In other words, the\
    function should modify the board input.\
    """\
    while (board.check_win() == None):\
        square = random.choice(board.get_empty_squares())\
        board.move(square[0], square[1], player)\
        if (board.check_win() == None):\
            player = provided.switch_player(player)\
    return None\
\
def mc_update_scores(scores, board, player):\
    """\
    This function takes a grid of scores (a list of lists) with\
    the same dimensions as the Tic-Tac-Toe board, a board from\
    a completed game, and which player the machine player is.\
    The function should score the completed board and update\
    the scores grid. As the function updates the scores grid\
    directly, it does not return anything.\
    """\
    winner = board.check_win()\
    if winner == player:\
        player_score = MCMATCH\
        other_player_score = -MCOTHER\
    elif winner == provided.switch_player(player):\
        player_score = -MCMATCH\
        other_player_score = MCOTHER\
    else:\
        player_score = 0\
        other_player_score = 0\
        \
    dimension = board.get_dim()\
    for row in range(dimension):\
        for col in range(dimension):\
            status = board.square(row, col)\
            if status == player:\
                scores[row][col] += player_score\
            elif status == provided.switch_player(player):\
                scores[row][col] += other_player_score\
            else:\
                scores[row][col] += 0\
    return None\
\
def get_best_move(board, scores):\
    """\
    This function takes a current board and a grid of scores.\
    The function should find all of the empty squares with the\
    maximum score and randomly return one of them as a (row,\
    column) tuple. It is an error to call this function with a\
    board that has no empty squares (there is no possible next\
    move), so your function may do whatever it wants in that\
    case. The case where the board is full will not be tested.\
    """\
    empty_squares = board.get_empty_squares()\
    score_list = []\
    scores_squares = \{\}\
    maximum_score_empty_squares = []\
    \
    if empty_squares == []:\
        return "No possible move left"\
    \
    for row,col in empty_squares:\
        score = scores[row][col]\
        score_list.append(score)\
        scores_squares[(row,col)] = score\
        \
    maximum = max(score_list)\
    for square,value in scores_squares.items():\
        if value == maximum:\
           maximum_score_empty_squares.append(square) \
   \
    return random.choice(maximum_score_empty_squares)\
\
def mc_move(board, player, trials):\
    """\
    This function takes a current board, which player the machine\
    player is, and the number of trials to run. The function should\
    use the Monte Carlo simulation described above to return a move\
    for the machine player in the form of a (row, column) tuple. Be\
    sure to use the other functions you have written!\
    """\
    dimension = board.get_dim()\
    scores = [[0 for dummy in range(dimension)] for dummy in range(dimension)]\
    \
    for dummy in range(trials):\
        board_copy = board.clone()\
        mc_trial(board_copy, player)\
        mc_update_scores(scores, board_copy, player)\
    \
    return get_best_move(board, scores)\
\
# Test game with the console or the GUI.\
# Uncomment whichever you prefer.\
# Both should be commented out when you submit for\
# testing to save time.\
\
# provided.play_game(mc_move, NTRIALS, False)        \
# poc_ttt_gui.run_gui(3, provided.PLAYERX, mc_move, NTRIALS, False)\
\
}